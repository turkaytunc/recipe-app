{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","recipes","ing","gradient","getData","query","axios","get","then","res","setState","data","hits","handleChange","event","target","name","value","handleKeyPress","key","showIng","item","map","className","text","showItems","recipe","label","src","image","ingredients","this","console","log","type","onChange","placeholder","onKeyPress","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAsFeA,E,2MAhFbC,MAAQ,CACNC,QAAS,GACTC,IAAK,GACLC,SAAU,I,EAMZC,QAAU,WACR,IAEIC,EAAK,0CAAsC,EAAKL,MAAMG,SAAjD,mBAFM,WAEN,oBADO,oCAEhBG,IAAMC,IAAIF,GAAOG,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAET,QAASQ,EAAIE,KAAKC,W,EAGjEC,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAAtBC,EADc,EACdA,KAAMC,EADQ,EACRA,MACd,EAAKP,SAAL,eAAiBM,EAAOC,K,EAE1BC,eAAiB,SAAAJ,GACG,UAAdA,EAAMK,KACR,EAAKf,W,EAITgB,QAAU,SAAAC,GACR,IAAInB,EAAMmB,EAAKC,KAAI,SAAAD,GACjB,OAAO,wBAAIE,UAAU,kBAAkBF,EAAKG,SAE9C,OAAO,uBAAGD,UAAU,QAAQrB,I,EAG9BuB,UAAY,WAoBV,OAnBY,EAAKzB,MAAMC,QACpBqB,KAAI,SAAAI,GAAM,OAAIA,EAAOA,UACrBJ,KAAI,SAAAD,GACH,OACE,yBAAKE,UAAU,cACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBAAkBF,EAAKM,OACtC,yBAAKJ,UAAU,iBACb,yBAAKA,UAAU,aAAaK,IAAKP,EAAKQ,UAG1C,6BACE,yBAAKN,UAAU,mBACZ,EAAKH,QAAQC,EAAKS,oB,mFAzC/BC,KAAK3B,Y,+BAkDG,IAAD,OAEP,OADA4B,QAAQC,IAAIF,KAAK/B,MAAMG,UAErB,yBAAKoB,UAAU,OACb,yBAAKA,UAAU,kBACb,2BACEA,UAAU,YACVW,KAAK,OACLlB,KAAK,WACLC,MAAOc,KAAK/B,MAAMG,SAClBgC,SAAU,SAAArB,GAAK,OAAI,EAAKD,aAAaC,IACrCsB,YAAY,6BACZC,WAAYN,KAAKb,iBAEnB,4BAAQK,UAAU,gBAAgBe,QAASP,KAAK3B,SAAhD,cAGA,6BAAM2B,KAAKN,mB,GA1EHc,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.288bdc5f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"./logo.svg\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    recipes: [],\n    ing: [],\n    gradient: \"\"\n  };\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData = () => {\n    const APP_ID = \"caed25b5\";\n    const APP_KEY = \"09a9d503749688f8a251838da8089fca\";\n    let query = `https://api.edamam.com/search?q=${this.state.gradient}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n    axios.get(query).then(res => this.setState({ recipes: res.data.hits }));\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n  handleKeyPress = event => {\n    if (event.key === \"Enter\") {\n      this.getData();\n    }\n  };\n\n  showIng = item => {\n    let ing = item.map(item => {\n      return <li className=\"ingredients-li\">{item.text}</li>;\n    });\n    return <p className=\"ings\">{ing}</p>;\n  };\n\n  showItems = () => {\n    let items = this.state.recipes\n      .map(recipe => recipe.recipe)\n      .map(item => {\n        return (\n          <div className=\"recipe-div\">\n            <div className=\"label-img\">\n              <div className=\"item-label-div\">{item.label}</div>\n              <div className=\"img-inner-div\">\n                <img className=\"recipe-img\" src={item.image}></img>\n              </div>\n            </div>\n            <div>\n              <div className=\"ingredients-div\">\n                {this.showIng(item.ingredients)}\n              </div>\n            </div>\n          </div>\n        );\n      });\n    return items;\n  };\n\n  render() {\n    console.log(this.state.gradient);\n    return (\n      <div className=\"App\">\n        <div className=\"app-second-div\">\n          <input\n            className=\"input-box\"\n            type=\"text\"\n            name=\"gradient\"\n            value={this.state.gradient}\n            onChange={event => this.handleChange(event)}\n            placeholder=\"Please enter ingredients..\"\n            onKeyPress={this.handleKeyPress}\n          />\n          <button className=\"submit-button\" onClick={this.getData}>\n            Get Recipe\n          </button>\n          <div>{this.showItems()}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}